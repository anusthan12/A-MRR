name: ASMR Video Automation

on:
  schedule:
    - cron: '0 */8 * * *'  # Every 8 hours
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run automation'
        required: false
        default: 'false'

jobs:
  asmr-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Enough time for video generation

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: üß± Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libfontconfig1 libxrender1
          ffmpeg -version

      - name: ‚¨ÜÔ∏è Upgrade pip & setuptools
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: üì¶ Install Python dependencies
        run: |
          pip install -r requirements.txt --verbose
          python -c "import gspread; print('‚úÖ gspread imported')"
          python -c "import moviepy.editor; print('‚úÖ moviepy imported')"
          python -c "import requests; print('‚úÖ requests imported')"
          python -c "from google.oauth2.service_account import Credentials; print('‚úÖ google-auth imported')"

      - name: üîç Validate environment variables
        run: |
          echo "Checking required environment variables..."
          [ -z "$GOOGLE_SHEET_ID" ] && echo "‚ùå GOOGLE_SHEET_ID missing" && exit 1
          [ -z "$GOOGLE_CREDENTIALS_JSON" ] && echo "‚ùå GOOGLE_CREDENTIALS_JSON missing" && exit 1
          echo "‚úÖ Environment variables are set"
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}

      - name: üîó Test Google Sheets connection
        run: |
          python -c "
import os, json, base64, gspread
from google.oauth2.service_account import Credentials
google_creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
creds_data = json.loads(base64.b64decode(google_creds_json).decode())
creds = Credentials.from_service_account_info(creds_data, scopes=['https://www.googleapis.com/auth/spreadsheets'])
gc = gspread.authorize(creds)
sheet_id = os.getenv('GOOGLE_SHEET_ID')
spreadsheet = gc.open_by_key(sheet_id)
print(f'‚úÖ Connected to Google Sheet: {spreadsheet.title}')
"        
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}

      - name: ü§ñ Run ASMR Automation
        run: |
          echo "üöÄ Starting ASMR automation cycle..."
          python amrcode.py 2>&1 | tee automation.log
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RUN_ONCE: "true"
          PYTHONUNBUFFERED: "1"

      - name: üì§ Upload logs and artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-logs-${{ github.run_number }}
          path: |
            *.log
            *.txt
            *.mp4
            *.mp3
            *.wav
          retention-days: 7

      - name: ‚úÖ Check Automation Results
        if: always()
        run: |
          if [ -f "automation.log" ]; then
            echo "üìã Automation log summary:"
            tail -20 automation.log
            grep -q "‚úÖ Automation cycle completed" automation.log && echo "üéâ Success!" || { echo "‚ö†Ô∏è Issues detected"; exit 1; }
          fi

      - name: üßπ Cleanup temporary files
        if: always()
        run: |
          echo "üßπ Cleaning temporary files..."
          rm -f *.mp4 *.mp3 *.wav *.tmp sound_*.*
          echo "‚úÖ Cleanup complete"
